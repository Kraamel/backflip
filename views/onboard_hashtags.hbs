<div class="main">
  <form class="pure-form pure-form-stacked" action="{{onboard.hashtagsAction}}" method="post">
    <input type="hidden" name="_id" value="{{record._id}}" />
    {{> form_errors}}
    <div class="pure-g">
      <div class="pure-u-1">
        <div id="hashtag-input-box" class="grid-box">
          <label for="hashtag">{{__ "What are you good at? What do you love? Where do you belong?"}}</label>
          <i class="fa fa-search" aria-hidden="true"></i>
          <input class="pure-input-1" id="hashtag-input" type="text" placeholder="{{hashtagSuggestions.0.name}}">
        </div>
        <div class="grid-box">
          <ul id="hashtag-cloud">
            {{#record.hashtags}}
            {{> hashtag}}
            {{/record.hashtags}}
          </ul>
          <input type="hidden" name="hashtags" value="end_of_hashtag_cloud" />
          <p class="cloud-howto">{{__ "The first three will be displayed in search results. Drag to add and reorder."}}</p>
        </div>
        <div class="grid-box">
          <h3>{{__ "Suggested"}}</h3>
          <ul id="hashtag-suggestions">
            {{#hashtagSuggestions}}
            {{> hashtag}}
            {{/hashtagSuggestions}}
          </ul>
        </div>
      </div>
    </div>
    <div class="bottom-buttons">
      <div class="pure-g">
        <div class="pure-u-1-2 pure-u-md-1-3">
          <div class="grid-box">
            <a class="pure-button scale back-button" href="{{onboard.introAction}}">{{{__ "Back"}}}</a>
          </div>
        </div>
        <div class="pure-u-1-2 pure-u-md-2-3">
          <div class="grid-box">
            <button type="submit" class="pure-button scale">{{{__ "Next"}}}</button>
          </div>
        </div>
      </div>
    </div>
  </form>
</div>

<script src="https://cdn.jsdelivr.net/algoliasearch/3/algoliasearch.min.js"></script>
<script src="https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.min.js"></script>
<script>
  var algoliaPublicKey = {{{json algoliaPublicKey}}};
  var newHashtagSentence = '{{__ "Create new hashtag"}}';
  var notFoundSentence = '{{__ "There is no matching hashtag... yet!"}}'
</script>
<script>
  var cloudUl = document.getElementById('hashtag-cloud');
  var suggestionsUl = document.getElementById('hashtag-suggestions');
  var hashtagInput = document.getElementById('hashtag-input');
</script>
<script>
  function getPictureUrl(suggestion) {
    var pictureUrl = '/images/placeholder_hashtag.png';
    if (suggestion.picture && suggestion.picture.url) pictureUrl = suggestion.picture.url;
    return pictureUrl;
  }

  function addHashtagToCloud(event, suggestion, dataset) {
    cloudUl.insertAdjacentHTML('afterbegin',
      '<li class="hashtag list-group-item added">' +
      '<img src="' + getPictureUrl(suggestion) + '">' +
      '<a class="js-remove">x</a>' +
      '<input type="hidden" name="hashtags" value="' + (suggestion.objectID || suggestion.tag) + '" />'+
      (suggestion.name || suggestion.tag) +
      '</li>'
    );
    search.autocomplete.setVal('');
  }

  function suggestionTemplate(suggestion) {
    if (suggestion.type === 'newHashtag') {
      return newHashtagSentence +
      ' <span><i class="fa fa-hashtag" aria-hidden="true"></i>' +
      suggestion.tag +
      '</span>';
    } else {
      return '<img src="' + getPictureUrl(suggestion) + '">' +
      suggestion._highlightResult.name.value;
    }
  }
</script>
<script>
  var ALGOLIA_APPID = 'RSXBUBL0PB';
  var ALGOLIA_SEARCH_APIKEY = algoliaPublicKey.value;
  var ALGOLIA_INDEX_NAME = 'world';
  var NB_RESULTS_DISPLAYED = 3;
  var client = algoliasearch(ALGOLIA_APPID, ALGOLIA_SEARCH_APIKEY);
  var index = client.initIndex(ALGOLIA_INDEX_NAME);
  var hitsSource = autocomplete.sources.hits(index, {facetFilters: 'type:hashtag', hitsPerPage: NB_RESULTS_DISPLAYED });
  var search = autocomplete('#hashtag-input', { hint: false, autoselect: true, autoselectOnBlur: true}, [
    {
      source: function(query, callback) {
        hitsSource(query, function(suggestions) {
          suggestions.push({type:'newHashtag', tag: query, name: query})
          callback(suggestions);
        });
      },
      name: 'hashtag-suggestions',
      templates: {
        suggestion: suggestionTemplate
      }
    }
  ]).on('autocomplete:selected', addHashtagToCloud)
  .on('autocomplete:shown', function() {hashtagInput.classList.add('open');})
  .on('autocomplete:closed', function() {hashtagInput.classList.remove('open');});
</script>

<script src="/javascripts/Sortable.min.js"></script>
<script>
  var animationSpeed = 200;
  var cloud = Sortable.create(
    cloudUl,
    {
      group: {name: "hashtags", pull: false, put: true},
      animation: animationSpeed,
      draggable: '.hashtag',
      filter: ".js-remove",
      onFilter: function (evt) {
      	var item = evt.item, ctrl = evt.target;

      	if (Sortable.utils.is(ctrl, ".js-remove")) {  // Click on remove button
      		item.parentNode.removeChild(item); // remove sortable item
      	}
      }
    }
  );
  var suggestions = Sortable.create(
    suggestionsUl,
    {
      group: {name: "hashtags", pull: true, put: false},
      sort: false,
      animation: animationSpeed,
      draggable: '.hashtag',
      filter: ".js-remove",
      onFilter: function (evt) {
      	var item = evt.item, ctrl = evt.target;

      	if (Sortable.utils.is(ctrl, ".js-remove")) {  // Click on remove button
      		item.parentNode.removeChild(item); // remove sortable item
      	}
      }
    }
  );
</script>
<script>
  var placeholders = [
    {{#hashtagSuggestions}}
      "{{name}}",
    {{/hashtagSuggestions}}
      ";-)"
  ];
</script>
<script>
  function incrementPlaceholder(pp, cp, dir) {
    var cp = cp+dir;
    if (cp > placeholders[pp].length) {
      dir = -1;
      cp--;
    } else if (cp < 0) {
      dir = +1;
      pp = getRandomInt(placeholders.length-1);
    }
    hashtagInput.placeholder = placeholders[pp].substring(0, cp);
    window.setTimeout(incrementPlaceholder, 100*(2+dir), pp, cp, dir);
  }
  window.onload = incrementPlaceholder(getRandomInt(placeholders.length-1), 0, 1);
</script>
